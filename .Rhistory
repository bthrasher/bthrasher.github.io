preProc$thresh
preProc$numComp
subTrain <- cbind(training[,c(58:69)],training[,1])
preProc <- preProcess(training[,c(58:69)],method="pca",thresh=0.8)
colname(subTrain[,13])<-"diagnosis"
colnames(subTrain[,13])<-"diagnosis"
colnames(subTrain)
trainPC <- predict(preProc,(training[,c(58:69)])
)
modelFit <- train(subTrain$training[,1]~.,method="glm",data=trainPC)
modelFit <- train(subTrain[,13]~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,c(58:69)])
confusionMatrix(testing$diagnosis,predict(modelFit,testPV))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
?read.csv
dat <- read.csv("D:/Users//bthrashe/Desktop//motivations.csv",stringsAsFactors=TRUE)
fit <- lm(Primary.Mode~.,data=dat)
summary(fit)
fit <- lm(Primary.Mode~Caltrain.VTA.pass,data=dat)
summary(fit)
inTrain <- createDataPartition(y=dat$Primary.Mode,p=.6,list=FALSE)
library("caret", lib.loc="~/R/win-library/3.1")
inTrain <- createDataPartition(y=dat$Primary.Mode,p=.6,list=FALSE)
training <- dat[inTrain,]
testing <- dat[-inTrain,]
M <- abs(cor(training[,-1]))
diag(M)<-0
which(M>0.8,arr.ind=T)
which(M>0.5,arr.ind=T)
which(M>0.1,arr.ind=T)
which(M>0.4,arr.ind=T)
plot(dat[,8],dat[,9])
preProc <- preProcess(training,method="pca")
trainPC <- predict(preProc,training)
preProc <- preProcess(training[,-1],method="pca")
trainPC <- predict(preProc,training[,-1])
modelFit <- train(training$Primary.Mode~.,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$Primary.Mode,predict(modelFit,testPC))
summary(preProc)
preProc$numComp
modelFit <- train(training$Primary.Mode ~ ., method="glm", preProcess="pca",data=training)
confusionMatrix(testing$Primary.Mode, predict(modelFit,testing))
confusionMatrix(testing$Primary.Mode, predict(modelFit,testPC))
dat <- read.csv("D:/Users//bthrashe/Desktop//motivations.csv",stringsAsFactors=TRUE)
inTrain <- createDataPartition(y=dat$Primary.Mode,p=0.7,list=FALSE)
training <- dat[inTrain,]
testing <- dat[-inTrain,]
preProc <- preProcess(training[,-1],method="pca",pcaComp=12)
trainPC <- predict(preProc,training[,-1])
modelFit <- train(training$Primary.Mode ~ .,method="glm",data=trainPC)
testPC <- predict(preProc,testing[,-1])
confusionMatrix(testing$Primary.Mode,predict(modelFit,testPC))
str(predict(modelFit,testPC))
str(testing$Primary.Mode)
confusionMatrix(factor(testing$Primary.Mode),predict(modelFit,testPC))
str(testPC)
dat <- read.csv("D:/Users//bthrashe/Desktop//motivations.csv",stringsAsFactors=TRUE)
dat[,1]<-factor(dat[,1])
inTrain <- createDataPartition(y=dat$Primary.Mode,p=0.7,list=FALSE)
training <- dat[inTrain,]
testing <- dat[-inTrain,]
preProc <- preProcess(training[,-1],method="pca")
trainPC <- predict(preProc,training[,-1])
modelFit <- train(training$Primary.Mode ~ .,method="glm",data=trainPC)
preProc <- preProcess(training[,-1],method="pca",pcaComp=12)
trainPC <- predict(preProc,training[,-1])
modelFit <- train(training$Primary.Mode ~ .,method="glm",data=trainPC)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
View(bike)
source('D:/Users/bthrashe/Desktop/motivations.R')
source('D:/Users/bthrashe/Desktop/motivations.R')
source('D:/Users/bthrashe/Desktop/motivations.R')
source('D:/Users/bthrashe/Desktop/motivations.R')
source('D:/Users/bthrashe/Desktop/motivations.R')
write.csv("D:/Users//bthrashe/Desktop/coeffsCAC.csv",coeffs)
summary(coeffs)
?write.csv
write.csv(coeffs,"D:/Users//bthrashe/Desktop/coeffsCAC.csv")
write.csv(prs,"D:/Users//bthrashe/Desktop/prsCAC.csv")
library("AppliedPredictiveModeling", lib.loc="~/R/win-library/3.1")
library("caret", lib.loc="~/R/win-library/3.1")
data(segmentationOriginal)
set.seed(125)
View(segmentationOriginal)
testing <- subset(segmentationOriginal,Case=="Train")
testing <- subset(segmentationOriginal,Case=="Test")
training <- subset(segmentationOriginal,Case=="Train")
fit <- rpart(Case~.,data=training)
fit <- train(training[,3:119],training[,3],method="rpart")
summary(fit)
fit2 <- train(Class~.,data=training,method="rpart")
plot(fit2$finalModel)
plot(fit2$finalModel,uniform=True)
plot(fit2$finalModel,uniform=TRUE)
print(fit2$finalModel)
summary(fit2)
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.1")
fancyRpartPlot(fit2$finalModel)
install.packages("rpart.plot")
library("rpart.plot", lib.loc="~/R/win-library/3.1")
fancyRpartPlot(fit2$finalModel)
View(training)
fit3 <- train(Class~.,method="rpart",data=training[,3:119])
fancyRpartPlot(fit3$finalModel)
install.packages("pgmm")
library("pgmm", lib.loc="~/R/win-library/3.1")
data(olive)
olive = olive[,-1]
View(olive)
fit <- train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit,newdata = as.data.frame(t(colMeans(olive))))
fancyRpartPlot(fit$finalModel)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library("ElemStatLearn", lib.loc="~/R/win-library/3.1")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
View(SAheart)
fitlm <- lm(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
fitlm <- lm(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=SAheart
)
fitlm <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=SAheart)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(fitlm,testAS)
predict(fitlm,testSA)
fitlm <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
prelm <- predict(fitlm,testSA)
missClass
summary(missClass)
missClass(prelm)
missClass(testSA,prelm)
missClass(trainSA,prelm)
fitlm <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=SAheart)
missClass(trainSA,predict(fitlm,trainSA))
?predict
View(trainSA)
missClass(trainSA,predict(fitlm,trainSA[,10]))
missClass(trainSA[,10],predict(fitlm,trainSA)
)
missClass(testSA[,10],predict(fitlm,testSA))
data(vowel.train)
data(vowel.test)
data(vowel)
data(vowel.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.train)
data(vowel.test)
y$vowel.train <- factor(y$vowel.train)
str(vowel.train)
str(vowel.test)
y$vowel.train <- factor(y$vowel.train)
View(vowel.train)
y$vowel.train <- as.factor(y$vowel.train)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
?train
fit <- train(vowel.train[,2:10],vowel.train[,1],method="rf")
?varImp
varImp(fit)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
lm <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA[,10],predict(lm,trainSA))
missClass(testSA[,10],predict(lm,testSA))
lm <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family="binomial",data=SAheart)
missClass(testSA[,10],predict(lm,testSA))
missClass(trainSA[,10],predict(lm,trainSA))
library(UsingR)
data(father.son)
str(father.son)
data(glaton)
data(gslton)
data(galton)
str(galton)
plot(sheight ~ fheight, data=father.son,bty="l",pch=20)
abline(a=0,b=1,lty=2,lwd=2)
abline(lm(sheight ~ fheight, data=father.son),lty=1,lwd=2)
library(shiny)
runApp()
runApp()
runApp()
lm <- lm(sheight~fheight)
lm <- lm(sheight~fheight,data=father.son)
predict(lm,data.frame(72),interval="confidence")
predict(lm,data.frame(fheight=72),interval="confidence")
pred <- predict(lm,data.frame(fheight=72),interval="confidence")
pred$fit
pred[1]
runApp()
?paste
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
traceback()
dat <- father.son
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?round
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?switch
shiny::runApp()
shiny::runApp()
shiny::runApp()
dat <- father.son
fit <- predict(lm(sheight~fheight,data=dat),fheight=75,interval="confidence")
fit
fit <- lm(sheight~fheight,data=dat)
predict(fit,fheight=75,interval="confidence")
?predict
predict(fit,fheight=data.frame(75),interval="confidence")
predict(fit,data.frame(75),interval="confidence")
predict(fit,fheight=data.frame(75),interval="confidence")
summary(fit)
pred <- predict(fit,fheight=data.frame(c(75)),interval="confidence")
pred
predict(lm(sheight~fheight,data=dat),fheight=72,interval="confidence")
remove(pred)
remove(father.son)
remove(fit)
summary(dat)
?attach
attach(father.son)
ht.lm <- lm(sheight~fheight,data=father.son)
newdat <- data.frame(fheight=73)
predict(ht.lm,newdat,interval="confidence")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("slidify", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.1")
library("slidifyLibraries", lib.loc="~/R/win-library/3.1")
author("shinyAppDeck")
?father.son
slidify("index.Rmd")
slidify("index.Rmd")
?plot
?plot.window
summary(ht.lm)
?qplot
qplot(fheight,sheight,data=father.son)
qplot(fheight,sheight,data=father.son,asp=0.5)
qplot(fheight,sheight,data=father.son,asp=0.5,facets=sheight~fheight)
qplot(fheight,sheight,data=father.son,asp=0.5)
?geom_line
qplot(fheight,sheight,data=father.son,asp=0.5)+stat_smooth(method="lm")
qplot(fheight,sheight,data=father.son,asp=0.5)+stat_smooth(method="lm")+geom_abline(intercept=0,slope=1)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
runApp()
pwd()
slidify("index.Rmd")
slidify("index.Rmd")
summary(ht.lm)
slidify("index.Rmd")
getwd()
setwd("..")
getwd()
runApp()
setwd("shinyAppDeck/")
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
summary(father.son)
slidify("index.Rmd")
summary(father.son$fheight)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
summary(father.son$fheight)
summary(father.son$sheight)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
setwd("..")
dat <- read.csv("pml-training.csv",stringsAsFactors=TRUE)
View(dat)
dat <- dat[,8:160]
View(dat)
?colnames
colnames(dat)
?which
which(dat[1,]!=="NA")
which(dat[1,]!="NA")
which(dat[1,]!="NA"&dat[1,]!="")
dat2 <- dat[,which(dat[1,]!="NA"&dat[1,]!="")]
View(dat2)
fit.lm <- lm(classe~.,data=dat2)
summary(fit.lm)
fit.lm <- lm(as.numeric(classe)~.,data=dat2)
summary(fit.lm)
library("caret", lib.loc="~/R/win-library/3.1")
?train
fit.rf <- train(dat2[,1:52],dat2[,53])
shiny::runApp()
dat <- read.csv("pml-training.csv",stringsAsFactors=TRUE)
dat <- dat[,8:160]
dat <- dat[,which(dat[1,]!="NA"&dat[1,]!="")]
inTrain <- createDataPartition(y=dat$classe,p=0.7,list=FALSE)
training <- dat[inTrain]
testing <- dat[-inTrain]
training <- dat[inTrain,]
testing <- dat[-inTrain,]
set.seed(123)
fit.lm <- lm(classe~.,data=training)
fit.lm <- lm(as.numeric(classe)~.,data=training)
fit.rf <- train(as.numeric(classe)~.,data=training,method="rf",prox=TRUE)
fit.rpart <- train(as.numeric(classe)_.,data=training,method="rpart")
fit.rpart <- train(as.numeric(classe)~.,data=training,method="rpart")
is.na(training)
?count
na<-is.na(training)
sum(na)
remove(na)
dat_belt <- dat[,c(1:13,53)]
dat_arm <- dat[,c(14:26,53)]
dat_dumbbell <- dat[,c(27:39,53)]
dat_forearm <- dat[,c(40:53)]
featurePlot(x=dat_belt[,1:13],y=dat_belt[,14],plot="pairs")
summary(lm(classe~.,data=dat_arm))
summary(lm(as.numeric(classe)~.,data=dat_arm))
summary(lm(as.numeric(classe)~.,data=dat_belt))
summary(lm(as.numeric(classe)~.,data=dat_dumbbell))
summary(lm(as.numeric(classe)~.,data=dat_forearm))
summary(fit.rpart)
print(fit.rpart$finalModel)
library("rattle", lib.loc="~/R/win-library/3.1")
fancyRpartPlot(fit.rpart$finalModel)
pred <- predict(fit.rpart,newdata=testing)
plot(pred,testing$classe)
str(pred)
max(pred)
min(pred)
plot(pred-testing$classe,testing$classe)
plot(pred-as.numeric(testing$classe),testing$classe)
dat_belt <- training[,c(1:13,53)]
dat_arm <- training[,c(14:26,53)]
dat_dumbbell <- training[,c(27:39,53)]
dat_forearm <- training[,c(40:53)]
rpart.belt <- train(as.numeric(classe)~.,data=dat_belt,method="rpart")
sum(is.na(dat_belt))
pred_belt <- predict(rpart_belt,newdata=testing[,c(1:13,53)])
pred_belt <- predict(rpart.belt,newdata=testing[,c(1:13,53)])
fancyRpartPlot(rpart.belt$finalModel)
plot(pred_belt,testing[,c(1:13,53)]$classe)
rpart.arm <- train(as.numeric(classe)~.,data=dat_arm,method="rpart")
pred_arm <- predict(rpart.arm,newdata=testing[,c(14:26,53)])
plot(pred_arm,testing[,c(14:26,53)]$classe)
rpart.dumbbell <- train(as.numeric(classe)~.,newdata=testing[,c(27:39,53)])
rpart.dumbbell <- train(as.numeric(classe)~.,data=dat_dumbbell,method="rpart"
)
pred_dumbbell <- predict(rpart.dumbbell,newdata=testing[,c(27:39,53)])
plot(pred_dumbbell,testing[,c(27:39,53)]$classe)
rpart.forearm <- train(as.numeric(classe)~.,data=dat_forearm,method="rpart")
pred_forearm <- predict(rpart.forearm,newdata=testing[,c(40:53)])
plot(pred_forearm,testing[,c(40:53)]$classe)
summary(fit.lm)
lm.pred <- lm(as.numeric(testing$classe)~pred_arm+pred_belt+pred_dumbbell+pred_forearm)
summary(lm.pred)
pred_belt <- predict(rpart.belt,newdata=dat_belt)
pred_arm <- predict(rpart.arm,newdata=dat_arm)
pred_dumbbell <- predict(rpart.dumbbell,newdata=dat_dumbbell)
pred_forearm <- predict(rpart.forearm,newdata=dat_forearm)
remove(pred)
fit <- lm(as.numeric(training$classe)~pred_arm+pred_belt+pred_dumbbell+pred_forearm)
pred_lm <- predict(fit,newdata=testing)
pred_lm <- predict(fit,newdata=training)
plot(pred_lm,training$classe)
install.packages("tree")
library("caret", lib.loc="~/R/win-library/3.1")
library("tree", lib.loc="~/R/win-library/3.1")
install.packages("C50")
library("C50", lib.loc="~/R/win-library/3.1")
View(training)
treeModel <- C5.0(x=training[,-53],y=training[,53],trials=10)
treeModel
summary(treeModel)
ruleModel <- C5.0(x=training[,-53],y=training[,53],trials=10,rules=TRUE)
ruleModel
summary(ruleModel)
C5imp(treeModel)
C5imp(ruleModel)
predTree <- predict(treeModel,newdata=testing[,-53])
predRule <- predict(ruleModel,newdata=testing[,-53])
plot(predTree,testing[,53])
predTree
plot(as.numeric(predTree),as.numeric(testing[,53]))
plot(as.numeric(predRule),as.numeric(testing[,53]))
?rmse
sum(as.numeric(predTree)-as.numeric(testing[,53]))
sum(as.numeric(predRule)-as.numeric(testing[,53]))
sum(as.numeric(predTree)-as.numeric(testing[,53])!=0)
sum(as.numeric(predRule)-as.numeric(testing[,53])!=0)
hist(as.numeric(predRule)-as.numeric(testing[,53]))
test_dat <- read.csv("pml-testing.csv")
View(test_dat)
test_dat <- test_dat[,8:160]
test_dat <- test_dat[,which(dat[1,]!="NA"&dat[1,]!="")]
testPred <- predict(ruleModel,newdata=test_dat[,-53])
View(test_dat)
test_dat <- read.csv("pml-testing.csv")
test_dat <- test_dat[,c(colnames(dat))]
colnames(dat)
View(test_dat)
test_dat <- test_dat[,8:160]
View(test_dat)
test_dat <- test_dat[,c(colnames(dat)[-53])]
View(test_dat)
testPred <- predict(ruleModel,newdata=test_dat)
as.character(testPred)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(as.character(testPred))
dat <- read.csv("pml-training.csv",stringsAsFactors=TRUE)
dat <- dat[,8:160]
dat <- dat[,which(dat[1,]!="NA"&dat[1,]!="")]
inTrain <- createDataPartition(y=dat$classe,p=0.7,list=FALSE)
training <- dat[inTrain,]
testing <- dat[-inTrain,]
summary(lm(as.numeric(classe)~.,data=training))
library("caret", lib.loc="~/R/win-library/3.1")
?misclass
??misclass
??misclas
treeModel <- C5.0(x=training[,-53],y=training[,53],trials=10)
predTree <- predict(treeModel,newdata=testing[,-53])
table(predTree$classe,testing$classe)
table(predTree,testing$classe)
setwd("shinyAppDeck/")
library("shiny", lib.loc="~/R/win-library/3.1")
?publish
publish(user="bthrasher",repo="DataProducts")
